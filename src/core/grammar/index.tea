
var Syntax = require "./syntax";

export var cache      = {};

export define(version, name, value):
	if !cache[version]:
		cache[version] = create(version);
	cache[version].define(name, value);

export create( version ):
	map = Jsop();
	Object.defineProperty(map, 'define', {
		writable: false,
		value: function(name, value):
			@[name] = new Syntax(name, value);
	});
	Object.defineProperty(map, 'version', {
		writable: false,
		value: version
	});
	return map

export syntax(name, patt, pack_mode):
	return Syntax.compile(name, patt, pack_mode);

export parse(handle, syntax, params, name, mode):
	if syntax.isSyntax:
		return syntax.exec(handle, handle.source, params);

	if handle.sugarBox && stx = handle.sugarBox.get(syntax):
		if ref = parse(handle, stx, params):
			return ref;

	if stx = handle.__grammar__[syntax]:
		return parse(handle, stx, params);

	return parse(handle, Syntax.compile(name, syntax, mode), params );