
class NodeObj:
	
	var array = Array.prototype;

	get index():
		return !@.parent ? -1 : array.indexOf.call( @.parent, @ );

	find( type ):
		list = [];
		for i, node -> @:
			if node.type == type:
				list.push(node);
			else if node.isNode:
				list.push.apply(list, node.find(type));
		return list;

	query():
		node = @;
		while node && !node.is.apply(node, arguments):
			node = node.parent;
		return node;

	insert(pos):
		args = Jsop.toArray(arguments, 1);
		len  = @.length;
		if pos < 0:
			pos = len + pos;
		for var i = pos; i < len; i++:
			args.push( @[i] );
		@.length = pos;
		@.add.apply(@, args);
		return @;

	delete(a, b = a):
		array.splice.call(@, a, b - a + 1 );
		return @;

	toList(index):
		if @.isToken:
			return index ? null : (index == 0 ? @ : [@]);
		list = [];
		for item => @:
			if !item: continue;
			if item.toList && item.length != null:
				list.push.apply(list, item.toList());
			else:
				list.push(item);
			if index === 0:
				return list[0];
		if typeof index == 'number':
			return list[ index < 0 ? list.length + index : index ];
		return list;

	is():
		types = @.types || [@.type];
		for item => arguments:
			if item == 'HEAD' &&  @.indent >= 0:
				return item;
			else if types.indexOf(item) != -1:
				return item;
			else if Node.isType(types[0], item):
				return item;
		return false;

	each(fn, __that, __indexs = []):
		that = __that || @;
		if @.isToken:
			fn.call(that,  @, __indexs.concat(0));
		else:
			for i, node -> @:
				if node:
					ref = fn.call(that, node, __indexs.concat(i));
					if ref === 0:
						continue;
					if ref === false:
						return __that ? false : @;
					if node.isNode && node.each(fn, that, __indexs.concat(i)) === false:
						return __that ? false : @;
		return @;

export default class Node extends NodeObj:

	constructor(type):
		@.type        = type;
		// @.subType     = null;
		@.length      = 0;
		if arguments.length > 1:
			@.add.apply( @, Jsop.toArray(arguments, 1) );

	get text():
		texts = [];
		list  = @.toList();
		for token => list:
			texts.push(token.text);
		return texts.join('');

	add ():
		for item => arguments:
			if !item:
				continue;
			if item.isNode || item.isToken:
				item.parent = @;
				@[ @.length++ ] = item;
			else if Array.isArray(item):
				if item.length:
					@.add.apply(@, item);
			else:
				Tea.error 'Node Object add medtch params error!';
		return @;

	clone ():
		var node = new Node(@.type);
		for i -> @:
			node[node.length++] = @[i];
		node.parent = @.parent;
		node.scope = @.scope;
		return node;

	@::isNode = true;

	@.NodeObj = NodeObj;

	static map = {};

	static define(types, names):
		node_map = @.map;
		for name => names:
			if name in node_map:
				@.define(types, node_map[name]);
			for type => types:
				node_map[type] |= [];
				node_map[type].push(name) if node_map[type].indexOf(name) == -1;

	static isType(name, type):
		node_map = @.map;
		if !type:
			if node_map['Express'].indexOf(name) != -1:
				return 'Express';
			if node_map['Declare'].indexOf(name) != -1:
				return 'Declare';
			if node_map['Statement'].indexOf(name) != -1:
				return 'Statement';
			return false;
		return name == type || node_map[type] && node_map[type].indexOf(name) != -1;
