Node = require "./node.js";
var width_limit = 80;

export default class Card extends Node.NodeObj:
	
	constructor(type):
		@.type     = type || '';
		@.length   = 0;
		if arguments.length > 1:
			@.add.apply( @, Jsop.toArray(arguments, 1) );

	add():
		for item => arguments:
			if !item:
				continue;
			if item.isToken:
				if !item.is('EOT'):
					@[ @.length++ ] = item;
				continue;
			
			if item.isCard:
				if item.type == 'List':
					@.add.apply(@, Jsop.toArray(item));
					continue;
				@[ @.length++ ] = item;
				continue;

			type = typeof item;
			if type == 'boolean':
				continue;
			if type == 'string':
				@[ @.length++ ] = item;
				continue;
			if type == 'number':
				@[ @.length++ ] = item+'';
				continue;
			if Array.isArray(item):
				@.add.apply(@, item);
				continue;
			Tea.error 5004;
		return @;

	copy( card ):
		@.type = card.type;
		for item => card:
			@[@.length++] = item;
		return @;

	get text():
		if !@.__formatted__:
			formatCard(@);

		var texts = [];
		for item => @:
			if !item:
				continue;
			if item.isToken:
				if item.is('EOT'):
					continue;
				texts.push(item.alias || item.text);
			else if item.isCard:
				texts.push( item.text );
			else:
				texts.push(item == ',' ? ', ': item);
		return texts.join('');

	@::isCard = true;

	function formatCard(card):
		card.__formatted__ = true;
		switch card.type:
			case 'JsonExpr', 'ArrayExpr':
				formatJsonAndArray(card);

			case 'VarDecl', 'ConstDecl', 'LetDecl':
				formatVarDecl(card);

			case 'Line':
				card.insert(0, '\n');

			case 'Root':
				if card.length == 3:
					[head, body, foot] = card;
					if head.length || foot.length:
						body = card;
				else:
					body = card;

				if body.length == 1 && (body[0].type == 'JsonExpr' || body[0].type == 'ArrayExpr'):
					card.__formatted__ = true;
					break;
				formatLineFeed(card);

			case 'BlockNode', 'BlockStam':
				if !checkEmpty(card, 1, -2):
					if card[0] == '{':
						card.insert(1, '\n');
						formatLineFeed(card, 2, -2);
						formatLineIndent(card);
						card.insert(-1, '\n');
					else:
						card.insert(0, '\n');
						formatLineFeed(card);
						formatLineIndent(card);

			case 'SwitchNode':
				if card.length:
					card.insert(0, '\n');
					formatLineFeed(card);
					formatLineIndent(card);
					card.add('\n');

			case 'HeadNode', 'BodyNode', 'FootNode':
				if card.length:
					formatLineFeed(card);

		return card;

	function formatLineFeed(card, start = 0, end = card.length-1):
		if end < 0:
			end = card.length + end;

		for var i = start; i <= end; i++:
			if (sub = card[i]) && (sub.length||sub.isToken):
				

				if !/^(HeadNode|FootNode|BodyNode|COMMENT|IfStam|WhileStam|WithStam|ForStam|SwitchStam|CaseStam|DefaultStam)$/.test(sub.type) && 
				   !/^(\n|\{|\}|;)$/.test(sub):
					end ++;
					card.insert(++i, ';');
				if i == end:
					break;
				if !/\n$/.test(sub) && card[i+1] && (card[i+1].length||card[i+1].isToken):
					end ++;
					card.insert(++i, '\n');

		return card;

	function formatLineIndent(card, start = 0, end = card.length-1):
		if card.type == 'String':
			return card;

		for var i = start; i <= end; i++:
			if not item = card[i]:
				continue;

			if item.isToken:
				if item.is('STRING'):
					continue;	
				item.text = item.text.replace(/\n/g, '\n\t');
				continue;

			if item.isCard:
				formatLineIndent( item.__formatted__ ? item : formatCard(item) );
				continue;

			card[i] = item.replace(/\n/g, '\n\t');
		return card;

	function formatJsonAndArray(card):
		if countTextLen(card, width_limit) >= width_limit:
			for i -> card:
				if card[i] == ', ' || card[i] == ',':
					card[i] = ',\n';
			card.insert(1, '\n');
			formatLineIndent(card);
			card.insert(-1, '\n');

	function formatVarDecl(card):
		text = countText(card);
		if /\=/.test(text) && text.length >= width_limit:
			for i -> card:
				if card[i] == ', ' || card[i] == ',':
					card[i] = ',\n';
			formatLineIndent(card);

	function countText(card):
		texts = [];
		for item => card:
			if !item:
				continue;
			if item.isToken:
				texts.push(item.text);
			else if item.isCard:
				texts.push(countText(item));
			else:
				texts.push(item);
		return texts.join('');

	function countTextLen(card, limit):
		len = 0;
		for item => card:
			if limit && len >= limit:
				return len;
			if item.isToken:
				len += item.text.length;
			else if item.isCard || Array.isArray(item):
				len += countTextLen(item, limit && limit - len);
			else:
				len += item.length;
		return len;

	function checkEmpty(card, start = 0, end):
		if !card.length && !card.isToken:
			return true;
		if end < 0:
			end = card.length + end;
		else:
			end = end || card.length-1;
		for var i = start; i<=end; i++:
			if card[i].length || card[i].isToken:
				return false;
		return true;