module.exports = {
    "EOT"                               : "\4"
    "LF"                                : "\n"
    "BLANK"                             : "\r \t \f \\ "
    "CONST"                             : "true false null undefined Infinity NaN"
    "KEYWORD"                           : "this instanceof in extends null undefined Infinity true false 
                                            if while with catch for switch case default else try do finally 
                                            new typeof delete void return break continue throw var function 
                                            let enum const import export debugger super yield class"
    "IDENTIFIER"                        : "$ default extends import export get set static require 
                                            class this as of and or not is"
    "SYMBOL"                            : ", ; . : ? \\\\ [ ] { } ( ) // /* */ #! # 
                                            = += -= *= /= %= &= >>= <<= >>>= 
                                            > < >= <= != !== == === ++ -- 
                                            ! ~ + - * / % & | ^ >> << >>> && || 
                                            ** :: |= ?= =? =| @ -> <- >> << >>> <<< => <= .. ... 
                                            ` ' \" \"\"\" ''' \"\"\"\" ''''"
    "QUOTE"                             : "` ' \" \"\"\" ''' \"\"\"\" ''''"
    "COMM"                              : "// /* */ #!"
    "BREAK"                        : "; \n"
    "PREFIX POSTFIX"                    : "++ --"
    "UNARY"                             : "new typeof yield void not delete ! ~ - + ++ --"
    "SPREAD"                            : "..."
    "PREC0"                             : "* / % **"
    "PREC1"                             : "+ -"
    "PREC2"                             : ">> << >>>"
    "PREC3"                             : "> < >= <= instanceof in of as ~="
    "PREC4"                             : "!= !== == === is not\\ is"
    "PREC5"                             : "^ ~ & |"
    "PREC6"                             : "and or && ||"
    "ASSIGN"                            : "= += -= *= /= %= &= |= >>= <<= >>>= ?= =? |= =| ^="
    "TERNARY"                           : "?"
    "LINK"                              : ". :: .."
    "OPEN"                              : "{ ( ["
    "CLOSE"                             : "} ] )"
    "BLOCK"                             : ": {"

    "BITWISE"                           : "PREC2 PREC5"
    "COMPUTE"                           : "PREC0 PREC1 BITWISE"
    "COMPARE"                           : "PREC3 PREC4"
    "LOGIC"                             : "PREC6"
    "BINARY"                            : "COMPUTE COMPARE LOGIC ASSIGN"
    "JOINT"                             : "UNARY TERNARY ASSIGN BINARY LINK [ ( , -> <- => <="
    "END"                               : "LF EOT BREAK"
};