/**
 * 存取变量 与 节点
 * 以 @ 为开头的字段为存取表达式
 *     @            代表当前节点
 *     @0 @[0]      代表当前节点中的第 0 个子节点
 *     @name        存取当点解析表达式中的 name 变量
 *     @[@.0.1.1]   依次取(节点或变量)中的成员或属性, @ 代表 parent
 *     @[Class] @[Functin] @[Let] 查找当前节点的作用域
 *     @[name]      取当前节点的作用域名称
 *     @[#name]     取变量的值作为取成员或属性的名称
 *     @[?0]        取节点的成员或属性，如果存在则取得，不存在则返回原节点
 * 
 */

module.exports = {
	"GeneratorDecl"                               : `#error(1121)`
	"GeneratorExpr"                               : `#error(1121)`
	"TAG"                                         : '#error(2015)'
	"TestPatt"                                    : `if(#argv(--test)): @`

	"Root"                                       : require('./root')
	"REGEXP"                                     : require('./regexp')
	"STRING"                                     : require('./string')
	"ForStam"                                    : require('./for')
	"ImportDecl"                                 : require('./import')
	"RequireExpr"                                : require("./require")
	"ExportDecl ExportDefaultDecl ExportAllDecl" : require('./export')
	"SpreadExpr"                                 : require('./spread')
	"ClassExpr ClassDecl ConstructorDecl SetterDecl GetterDecl StaticDecl SuperExpr AtExpr" : require('./class')

	
	
	"BlockNode BlockStam" : `
		if(@[@] == [CaseStam DefaultStam])        : #head#body#foot
		else                                      : {#head#body#foot}
	`
	"ArrayExpr"                                   : `[#join]`
	"SequenceExpr"                                : `#join`
	"GroupExpr"                                   : `(#join)`
	"VarDecl ConstDecl LetDecl"                   : `var #join(@)`
	"DebuggerStam"                                : `@0`
	"LabelStam"                                   : `@0 @1 @2`
	"PrefixExpr PostfixExpr"                      : `@0@1`
	"FunctionDecl"                                : `@0 @1@2@3`
	"FunctionExpr"                                : `@0@1@2`
	"CallExpr"                                    : `@`
	"ParamsExpr"                                  : `(#join)`
	"VariableExpr"                                : `@0`
	"NewExpr ReturnStam BreakStam ContinueStam ThrowStam" : `@0 @1`
	"ConditionExpr"                               : `(@0)`
	"IfPatt WhileStam WithStam"                   : `@0 @1@2`
	"ElseIfPatt"                                  : `@0 if @1@2`
	"ElsePatt"                                    : `@0 @1`
	"CatchPatt"                                   : `@0 @1 @2`
	"TryPatt FinallyPatt"                         : `@0 @1`
	"SwitchStam"                                  : `@0 @1{@2}`
	

	"ArgusExpr" : `
		(
		each(@, ","):
			if(@ == RestPatt):
				if(@[index] < @[@.length] - 1): #error(1131)
				@0
				#head("@0 = [].slice.call(arguments, @[index])")
			else if(@ == AssignExpr): @0
				#head("if (@0 == null) @")
			else: @
		)
	`
	"JsonExpr" : `
		{
		each(@, ","):
			switch(@):
				case GetterDecl      : get @0@1@2
				case SetterDecl      : set @0@1@2
				case MethodDecl      : @
				case NameExpr        : "@": @
				case PropertyInit      : 
					if(@0 == STRING) : @0: @2
					else             : "@0": @2
				default              : #error(1122)
		}
	`
	"RestPatt": `
		if(@[index] == @[@.length] - 1)  : @0
		else                             : #error(1131)
	`
	"ArrayDest" : `
		if(@2 == ArrayExpr):
			#{@right = @2}
			each(#check(@0), ","):
				switch(#alias(@)):
					case RestPatt        : @ = [#join(@[#right], @eachIndex)]
					case PropertyInit    : @ = @[#right.#eachIndex] == null ? @2 : @[#right.#eachIndex]
					default              : @ = @[#right.#eachIndex]
		else:
			if(@2 != Variable)           : @ref = @2, #{@right = @ref}
			else                         : #{@right = @2}
			each(#check(@0), ","):
				switch(#alias(@)):
					case RestPatt        : @ = [].slice.call(@right, @eachIndex)
					case PropertyInit    : @0 = @right[@eachIndex] == null ? @2 : @right[@eachIndex]
					default              : @ = @right[@eachIndex]
	`
	"JsonDest" : `
		if(@2 != Variable)           : @ref = @2, #{@right = @ref}
		else                         : #{@right = @2}
		each(#check(@0), ","):
			switch(#alias(@)):
				case RestPatt        : @ = (function(o, m, _){_={};for(var k in o)if(m.indexOf(k)==-1&&o.hasOwnProperty(k))_[k]=o[k];return _})(@right, [#join(@[@], 0, @eachIndex, "\"@[?0]\"")]) 
				case PropertyInit    : @0 = @right["@0"] == null ? @2 : @right["@0"]
				default              : @ = @right["@"]
	`
	"NotExpr" : `
		if(@1 == [Value]) : !@1
		else : !(@1)
	`
	"UnaryExpr" : `
		switch(@0):
			case +      : Math.abs(@1)
			case SYMBOL : @0@1
			default     : @0 @1
	`	
	"AssignPatt" : `
		switch(@1):
			case ?=  : @[0] == null && (@[0] = @[2])
			case =?  : #ref(@2) != null && (@[0] = @ref)
			case |=  : (@[0] || (@[0] = @[2]))
			case =|  : #ref(@2) && (@[0] = @ref)
			default  : @0 @1 @2
	`
	"AssignExpr" : `
		if(@0 == SliceExpr):
			if(@[0.1.2])           : [].splice.apply(@[0.0], [@[0.1.0], @[0.1.2]].concat(@2))
			else if(@[0.1.1]):
				if(@[0.1.1] === :) : [].splice.apply(@[0.0], [@[0.1.0], 0].concat(@2))
				else               : [].splice.apply(@[0.0], [0, @[0.1.1]].concat(@2))
			else                   : @[0.0][@[0.0].length + 1] = @2
		else                       : @0 @1 @2
	`
	"SliceExpr" : `
		if(@[1.2])           : @0.slice(@[1.0], @[1.2])
		else if(@[1.1]):
			if(@[1.1] === :) : @0.slice(@[1.0])
			else             : @0.slice(0, @[1.1])
		else                 : @0.slice()
	`
	"ComputeExpr" : `
		if(@1 === **)        : Math.pow(@0, @2)
		else                 : @0@1@2
	`
	"CompareExpr" : `
		if(@0 == CompareExpr)           : @0 && @[0.2] @1 @2
		else:
			switch(@1):
				case as, ~=:
					if(@2 == STRING) :
						if(@2 == ["array"] )                                : Array.isArray(@0)
						else                                                : typeof @0 == @2
					else if(@2 == [undefined boolean object string number]) : typeof @0 == "@2"
					else if(@2 == array)                                    : Array.isArray("@0")
					else                                                    : @0 instanceof @2
				case in:
					if(@2 == ArrayExpr) : @2.indexOf(@0)>=0
					else                : @2.hasOwnProperty(@0)
				case of:
					if(@2 == ArrayExpr) : @2.indexOf(@0)>=0
					else                : [].indexOf.call(@0, @2)>=0
				case is                 : @0 === @2
				case not\ is            : @0 !== @2
				default                 : @0 @1 @2
	`
	"LogicExpr" : `
		if(@m = @1):
			if(@1 == or)       : #{@m = \|\|}
			else if(@1 == and) : #{@m = \&\&}
		if(@2 == Express)      : @0 @m #group(@2)
		else if(@m == \|\|)    : if (!#group(@0)) @2
		else                   : if (@0) @2
	`
	"TernaryExpr" : `
		if(@3):
			if(@2 == Express && @4 == Express) : #group(@0) ? #group(@2) : #group(@4)
			else                               : if (@0) @2\; else @4
		else if(@2 == Express)                 : #ref(@0) != null ? @ref : @2
		else                                   : if (@0) @2
	`
	"SeleteStam"  : `
		if(@1 === [if <-])        : if (@2) @0
		else if(@1 === [or \|\|]) : if (!#group(@0)) @2
		else                      : if (@0) @2
	`
	"MemberExpr" : `
		if(@0 === [):
			if(@[1.-1] === UnaryExpr &&  @[1.-1.0] === [-]) : @0@[@.0].length@1@2
		else if(@0 === ::):
			if(@1)                                          : .prototype.@1
			else                                            : .prototype
		else                                                : @
	`
	"LinkStam" : `
		if(@[@] === AssignExpr) : (#join( 1 ))
		else                    : #join( 1 )
	`
	"LinkPatt" : `
		if(@0 == GroupExpr)    : (@[@.0].#join(@0))
		else                    : @[@.0].@
	`
	"ArrowExpr" : `
		if(@1 == Express)        : function@0{return @1}
		else if(@1 == BlockNode) : function@0@1
		else                     : function@0{@1}
	`
	"DoWhileStam" : `
		if(@2) : @0 @1 @2 @3
		else   : @0 @1#foot(break) while(true)
	`
	"TryStam" : `
		if(@1) : @
		else   : @ catch (_e) {}
	`
	"CaseStam" : `
		each(@1): case @:
		if(@2 && @[2.length]):
			if(@[2.-1] == ContinueStam)                : #del(@[2.-1]); @2
			else if(@[2.-1] == [ReturnStam BreakStam]) : @2
			else                                       : @2#foot(break)
	`
	"DefaultStam" : `
		@0:
		if(@1 && @[1.length]) :
			if(@[1.-1] == ContinueStam)                : #del(@[1.-1]); @1
			else if(@[1.-1] == [ReturnStam BreakStam]) : @1
			else                                       : @1#foot(break)
	`
	"MethodDecl" : `
		if(@[@] == JsonExpr)                         : "@0": function@1@2
		else if(@[@] == StaticDecl)                  : @[Class.name].@0 = function@1@2
		else if(@[scope.parent.type] === ClassScope) : @[Class.name].prototype.@0 = function @1@2
		else                                    : function @0@1@2
	`
}