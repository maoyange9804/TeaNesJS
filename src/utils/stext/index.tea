
pair    = {'(':')', '[':']', '{':'}', '\'':'\'', '\"':'\"', '`':'`'};

pair_re = new RegExp( '\\'+Object.keys(pair).join('|\\'), 'g' );

sep_cache = {};

export default SText(something, qq):
	if typeof something == 'object':
		cache = [];
		text = JSON.stringify(something, function(key, value) {
		    if typeof value === 'object' && value !== null:
		        if cache.indexOf(value) !== -1:
		            return '[circular]';
		        cache.push(value);
		    return value;
		});
		if arguments.length > 1:
			arguments[0] = text;
			text = format.apply(@, arguments);
	else:
		text = format.apply(@, arguments);
	return text

export tabsize = '    ';

export format(text, qq):
	if !text:
		return text+'';
	text = JSON.stringify(text);
	text = text.replace(/^\"|\"$/g, '');
	if /%[%sdj]/.test(text) && arguments.length > 1:
		i = 1;
		text = text.replace( /%[%sdj]/g, function($):
			$ == '%%' && return '%';
			i >= arguments.length && return $;
			return SText( arguments[i++], qq);
		);
		for i, $ -> arguments:
			text += ' ' + SText($, qq);
	else if qq != '"':
		text = text.replace(/\\"/g, '"').replace(/'/g, '\\\'');
	return text;

export re( str ):
	if str as RegExp:
		str = str.toString().replace(/^\/|\/[igmuy]?$/g, '');
	else if Array.isArray(str):
		for i -> str:
			str[i] = str[i].replace(/([^\w\s\|])/g, '\\$1');
			str[i] = str[i].replace(/\n/g, '\\n');
			str[i] = str[i].replace(/\t/g, '\\t');
		str = str.join('|');
	else:
		str = str.replace(/([^\w\s\|])/g, '\\$1');
		str = str.replace(/\n/g, '\\n');
		str = str.replace(/\t/g, '\\t');
	if !/[^\|]/.test(str):
		str = str.replace(/\|/g, '\\|');
	return str;

export copy(text, num):
	var tmp = [];
	num = Math.max(num || 0, 0);
	while num -- > 0:
		tmp.push(text);
	return tmp.join('');

export trim(text):
	text = text.replace( /^\s+/, '');
	text = text.replace( /(\\*)?\s+$/, function($, $1):
		if $1 && $1.length % 2:
			return $.substr(0, $1.length + 1 );
		return $1 || '';
	);
	return text;
	
export trimPP(text):
	return text.replace(/^`+|^'+|^"+|"+$|'+$|`+$/g, '');

export cleanESC(text):
	text = text.replace(/\\(n)\b/g, '\n');
	text = text.replace(/\\(t)\b/g, '\t');
	return text.replace(/\\(\W)/g, '$1');

export limit(text, len):
	if text.length <= len:
		return text;
	return text.substr(0, len)+'..';

//

export split(text, separator, _trim, _cesc, _pair):
	if !sep_cache[separator]:
		sep_cache[separator] = new RegExp( '(\\\\*)('+ (separator ? re(separator) : ' ')+')' );
	separator = sep_cache[separator];

	slices    = [];
	a         = 0;
	if _pair:
		_pair_re = new RegExp( '\\'+Object.keys(_pair).join('|\\'), 'g' );
	else _pair !== false:
		_pair    = pair;
		_pair_re = pair_re;

	while text:
		if m = text.substr(a).match(separator):
			if m[1].length % 2 != 0:
				a += m.index + m[0].length;
				continue;

			b   = a + m.index + m[1].length;

			if _pair_re && p = matchCheckESC(text, _pair_re, a):
				ab = indexPair(text, p[0], _pair[p[0]], p.index, true);
				if ab && b > ab[0]:
					a = ab[1]+1;
					continue;

			slices.push( text.slice(0, b) );
			if _trim === false:
				slices.push( m[2] );
			text = text.slice( b + m[2].length );
			a = 0;

		else:
			slices.push(text);
			break;

	ref = [];
	for text => slices:
		text = trim( text ) if _trim;
		text = cleanESC(text) if _cesc && text;
		if _trim && _trim !== 'params':
			text && ref.push( text );
		else:
			ref.push( text );
	return ref;

export indexOf(text, target, pos):
	while true:
		p = text.indexOf(target, pos);
		if p <= 0:
			return p;
		n = 0
		while text[p - n - 1] == '\\':
			n += 1;
		if n % 2:
			pos = p + 1
			continue;
		return p;

export indexPair(text, left, right = left, pos, _esc):

	pos   = pos || 0;
	_esc  = _esc || (left == "'" || left == '"');

	a = _esc ? indexOf(text, left, pos) : text.indexOf(left, pos);
	if a == -1:
		return;

	b = _esc ? indexOf(text, right, a + 1) : text.indexOf(right, a + 1);
	if b == -1:
		return;

	if left == right:
		return [a, b];

	_a = a;
	while true:
		_a = _esc ? indexOf(text, left, _a + 1) : text.indexOf(left, _a + 1);
		if _a > a && _a < b:
			b = _esc ? indexOf(text, right, b + 1) : text.indexOf(right, b + 1);
			if b == -1:
				return;
			continue;
		break;
	return [a, b];

export slicePair(text, left, right = left, pos, _esc):
	ab = indexPair(text, left, right, pos, _esc);
	if ab:
		return text.slice( ab[0]+left.length, ab[1]);

export indexLine(text, pos):
	lines = text.split('\n');
	shift = -1;
	num   = 0;
	last  = lines.length-1;

	for i, line -> lines:
		if i < last:
			line += '\n';
		num += 1;
		shift += line.length;
		if pos <= shift:
			linetext = line;
			break;
	if linetext:
    	return [linetext, num, linetext.length - 1 - (shift - pos)]; 

export indexRe(text, re, pos, _pair = /"|'|`/g):
	if !re.global: 
		re = new RegExp( @.re(re),  (re.ignoreCase?'i':'')+(re.multiline?'m':'')+'g' );
	index = (pos || 0) -1;
	len   = text.length;
	while ++ index < len:
		re.lastIndex = index;
		if m = re.exec(text):
			if _pair:
				_pair.lastIndex = index;
				p = _pair.exec(text);
				if p && p.index < m.index:
					if ab = indexPair(text, p[0], pair[p[0]], p.index):
						index = ab[1]+1;
						continue;
			return m.index;
		else:
			return - 1;

export clip(text, _tabsize):
	text  = spaceTab( text.replace(/^(\s*?\n)+|\s*$/g, ''), _tabsize);
	lines = text.split('\n');
	min   = -1;

	for line => lines:
		indent = line.match(/^\s*/)[0].length;
		if min == -1 || indent < min:
			min = indent;

	if min > 0:
		text = text.replace( (new RegExp('^\ {'+min+'}', 'mg')), '');
	return text;

export width(text, _tabsize):
	lines = spaceTab(text, _tabsize).split('\n');
	w = 0;
	for i -> lines:
		if (len = lines[i].length) > w:
			w = len ;
	return w;

export spaceTab(text, _tabsize = tabsize):
	return text.replace(/\t/g, _tabsize);

// 

export parse(text):
	try:
		return eval( text );
	catch e:
		return '"'+text+'"';
	return true;

export toUnicode(text):
	texts = [];
	for i -> text:
		u = text.charCodeAt( i );
		texts.push( u <= 0 ? text[i] : "\\u"+('0000'+u.toString(16)).slice(-4) ); 
	return texts.join('');

function matchCheckESC(text, re, last):
	if last || last === 0:
		re.lastIndex = last;
	while m = re.exec( text ):
		if text[m.index - 1] == '\\':
			n = 1;
			while text[m.index - n - 1] == '\\':
				n ++;
			if n % 2:
				continue;
		return m;